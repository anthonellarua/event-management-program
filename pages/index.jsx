import Head from "next/head";
import Link from "next/link";
import connection from '../lib/db';
import Image from "next/image";
import styles from './index.module.scss';

export default function Home({ upcomingEvents, latestUncontactedInvites }) {

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <main>
        <div className={styles.home}>
          <div>
            <h2>Pr√≥ximos eventos</h2>
            <ul className={styles.events}>
              { upcomingEvents.map(event => (
                <Link href={`/eventos/${event.id}`} className={styles.events__item}>
                  <h4>{event.name_event}</h4>
                  <span>{event.description}</span>
                  <div className={styles.events__details}>
                    <div className={styles.events__details__container}>
                      <span> <Image width={20} height={20} src="/icons/pin-icon-gray.png" alt=""/> {event.location}</span>
                      <span> <Image width={20} height={20} src="/icons/calendar-icon-gray.png" alt=""/> {event.start_date}</span>
                    </div>
                    <div className={styles.events__details__chevron}>
                      <Image width={24} height={24} src="/icons/chevron-right-light.png" alt=""/>
                    </div>
                  </div>
                </Link>
              ))}
            </ul>
          </div>
          <div>
            <h2>Invitados que faltan contactar</h2>
            <ul>
              {latestUncontactedInvites.map(invite => (
                <li key={invite.id}>
                  {invite.name} {invite.last_name} - {invite.event_name}
                </li>
              ))}
            </ul>
          </div>
        </div>
      </main>
    </>
  );
}

export async function getStaticProps() {
  const upcomingEventsQuery = `
    SELECT evento.*, lugares.name AS location
    FROM evento
    LEFT JOIN lugares ON lugares.evento_id = evento.id
    ORDER BY start_date ASC
    LIMIT 2;
  `;

  const latestUncontactedInvitesQuery = `
    SELECT invitados.*, evento.name_event AS event_name
    FROM invitados
    JOIN evento ON invitados.evento_id = evento.id
    WHERE invitados.contactado = 0
    ORDER BY invitados.id DESC
    LIMIT 4;
  `;

  try {
    const [upcomingEventsResult] = await connection.query(upcomingEventsQuery);
    const [latestUncontactedInvitesResult] = await connection.query(latestUncontactedInvitesQuery);

    // Convert Date objects to formatted strings
    const formatDate = (date) => {
      if (!date) return null;
      const options = { day: '2-digit', month: 'long', year: 'numeric' };
      return new Date(date).toLocaleDateString('es-ES', options);
    };

    const upcomingEvents = upcomingEventsResult.map(event => ({
      ...event,
      start_date: formatDate(event.start_date),
      end_date: formatDate(event.end_date),
    }));

    const latestUncontactedInvites = latestUncontactedInvitesResult;

    return {
      props: {
        upcomingEvents,
        latestUncontactedInvites,
      },
    };
  } catch (error) {
    console.error("Error fetching data:", error);
    return {
      props: {
        upcomingEvents: [],
        latestUncontactedInvites: [],
      },
    };
  }
}
