import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import connection from '../lib/db';

export default function Home({ upcomingEvents, latestUncontactedInvites }) {
  const router = useRouter();

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="preconnect" href="https://fonts.googleapis.com"/>
        <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin />
        <link href="https://fonts.googleapis.com/css2?family=Comfortaa:wght@300..700&display=swap" rel="stylesheet"></link>
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          <h1>Bienvenido a la Aplicación de Gestión de Eventos</h1>
          <nav>
            <ul>
              <li>
                <Link href="/events">
                  Ver Eventos
                </Link>
              </li>
              <li>
                <Link href="/events/create">
                  Crear Evento
                </Link>
              </li>
            </ul>
          </nav>
          <h2>Eventos Próximos:</h2>
          <ul>
            {upcomingEvents && upcomingEvents.map(event => (
              <li key={event.id}>
                <Link href={`/events/${event.id}`}>
                  <a>{event.name_event}</a>
                </Link>
              </li>
            ))}
          </ul>
          <h2>Últimos Invitados no Contactados:</h2>
          <ul>
            {latestUncontactedInvites && latestUncontactedInvites.map(invite => (
              <li key={invite.id}>
                {invite.name} {invite.last_name}
              </li>
            ))}
          </ul>
        </div>
      </main>
    </>
  );
}

export async function getStaticProps() {
  // Consulta para obtener los dos eventos más cercanos a la fecha de start_date
  const upcomingEventsQuery = `
    SELECT * FROM eventos
    ORDER BY start_date ASC
    LIMIT 2;
  `;

  // Consulta para obtener los 4 últimos invitados que no han sido contactados
  const latestUncontactedInvitesQuery = `
    SELECT * FROM invitados
    WHERE contactad = false
    ORDER BY id DESC
    LIMIT 4;
  `;

  try {
    const [upcomingEventsResult] = await connection.query(upcomingEventsQuery);
    console.log("Upcoming events:", upcomingEventsResult);
  
    const [latestUncontactedInvitesResult] = await connection.query(latestUncontactedInvitesQuery);
    console.log("Latest uncontacted invites:", latestUncontactedInvitesResult);
  
    return {
      props: {
        upcomingEvents: upcomingEventsResult,
        latestUncontactedInvites: latestUncontactedInvitesResult,
      },
    };
  } catch (error) {
    console.error("Error fetching data:", error);
    return {
      props: {
        upcomingEvents: [],
        latestUncontactedInvites: [],
      },
    };
  }
  
}
